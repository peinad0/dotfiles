#!/bin/bash
set -e

# --------------------------------------------------

# COLORS

# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

NC='\033[0m' # No Color

DARK_GRAY='\033[1;30m'
GREEN='\033[0;32m'
LIGHT_PURPLE='\033[1;35m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
YELLOW='\033[1;33m'

# --------------------------------------------------

# FUNCTIONS

error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
        echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
        echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    exit "${code}"
}
trap 'error ${LINENO}' ERR

function echo_task() {
    echo -e " ${YELLOW}*${NC} $1"
}

function echo_sub_task() {
    echo -e "   ${YELLOW}*${NC} $1"
}

function check_apt_installed() {
    return dpkg -l "$1" &> /dev/null
}

function apt_install() {
    if dpkg --get-selections | grep -q "^$1[[:space:]]*install$" >/dev/null; then
        echo_sub_task "$1 already installed"
    else
        echo_sub_task "Installing $1"
        sudo apt-get install -qq -y "$1"
    fi
}

function is_sudo() {
    if groups | grep -q "\bsudo\b"; then
        return 0
    fi
    return 1
}

WARNS=()
function add_warn() {
    WARNS+=("$1")
}

function display_warns() {
    if [ ${#WARNS[@]} -gt 0 ]; then
        echo -e "\n\n${YELLOW}WARNING:${NC}"
        for warn in "${WARNS[@]}"
        do
            echo -e " ${YELLOW}*${NC} $WARNS"
        done
    fi
}

# --------------------------------------------------

DOTFILES_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# --------------------------------------------------

CPU_INFO=$(sed -n 's/^model name[ \t]*: *//p' /proc/cpuinfo | uniq | sed ':a;N;$!ba;s/\n/, /g')
DISTRO_NAME=$(sed -n 's/^NAME*= *//p' /etc/os-release | tr -d '"')
DISTRO_VERSION=$(sed -n 's/^VERSION_ID*= *//p' /etc/os-release | tr -d '"')
IS_RUNNING_SUDO=$(if is_sudo -eq 0; then echo 'Yes'; else echo 'No'${NC}; fi)

echo "----------------------------------------------------------------------------------------------------------------"
echo ""
echo -e "                 ..:::::::::.."
echo -e "            ..:::aad8888888baa:::.."
echo -e "         .::::d:?88888888888?::8b::::."
echo -e "       .:::d8888:?88888888??a888888b:::."
echo -e "     .:::d8888888a8888888aa8888888888b:::."
echo -e "    ::::dP::::::::88888888888::::::::Yb::::"
echo -e "   ::::dP:::::::::Y888888888P:::::::::Yb::::          ${YELLOW}User:${NC}           $(whoami)"
echo -e "  ::::d8:::::::::::Y8888888P:::::::::::8b::::         ${YELLOW}Hostname:${NC}       $(hostname)"
echo -e " .::::88::::::::::::Y88888P::::::::::::88::::.        ${YELLOW}Distro:${NC}         $DISTRO_NAME $DISTRO_VERSION"
echo -e " :::::Y8baaaaaaaaaa88P:T:Y88aaaaaaaaaad8P:::::        ${YELLOW}Kernel:${NC}         $(uname -r)"
echo -e " :::::::Y88888888888P::|::Y88888888888P:::::::        ${YELLOW}Shell:${NC}          $SHELL"
echo -e " ::::::::::::::::888:::|:::888::::::::::::::::        ${YELLOW}CPU:${NC}            $CPU_INFO"
echo -e " ':::::::::::::::8888888888888b::::::::::::::'        ${YELLOW}Home directory:${NC} $HOME"
echo -e "  :::::::::::::::88888888888888::::::::::::::         ${YELLOW}Dotfiles:${NC}       $DOTFILES_DIR"
echo -e "   :::::::::::::d88888888888888:::::::::::::          ${YELLOW}Sudo:${NC}           $IS_RUNNING_SUDO"
echo -e "    ::::::::::::88::88::88:::88::::::::::::"
echo -e "     '::::::::::88::88::88:::88::::::::::'"
echo -e "       '::::::::88::88::P::::88::::::::'"
echo -e "         '::::::88::88:::::::88::::::'"
echo -e "            '':::::::::::::::::::''"
echo -e "                '':::::::::''"
echo ""
echo "----------------------------------------------------------------------------------------------------------------"
echo ""

echo "Executing tasks:"

# apt packages
if is_sudo -eq 0; then
    if command -v apt-get > /dev/null; then
        echo_task "Installing apt packages"
        apt_install "autojump"
        apt_install "curl"
        apt_install "htop"
        apt_install "python"
        apt_install "python-pip"
        apt_install "python3"
        apt_install "python3-pip"
        apt_install "tmux"
        apt_install "vim"
        apt_install "zsh"
    else
        echo_task "Skipping apt packages"
    fi
else
    echo_task "Skipping apt packages (not sudo)"
fi

# VIM
echo_task "Setting up VIM config"
ln -sf "$DOTFILES_DIR/vim/.vimrc" "$HOME/.vimrc"

# Local ~/bin
echo_task "Setup local bin"
mkdir -p "$HOME/bin"
for f in $DOTFILES_DIR/bin/*; do
    [ -e "$filename" ] || continue

    bin_filename=$(basename "$f")
    echo_sub_task "$bin_filename"
    ln -sf "$DOTFILES_DIR/bin/$bin_filename" "$HOME/bin/$bin_filename"
done

for f in $DOTFILES_DIR/scripts/bin/*; do
    [ -e "$filename" ] || continue

    bin_filename=$(basename "$f")
    echo_sub_task "$bin_filename"
    ln -sf "$DOTFILES_DIR/scripts/bin/$bin_filename" "$HOME/bin/$bin_filename"
done

# SYS files
echo_task "Setup sys files"
for f in $DOTFILES_DIR/sys/*; do
    [ -e "$filename" ] || continue

    sys_filename=$(basename "$f")
    echo_sub_task "$sys_filename"
    ln -sf "$DOTFILES_DIR/sys/$sys_filename" "$HOME/$sys_filename"
done

# Git
echo_task "Setting up git"
for f in $DOTFILES_DIR/git/*; do
    [ -e "$filename" ] || continue

    git_filename=$(basename "$f")
    echo_sub_task "$git_filename"
    ln -sf "$DOTFILES_DIR/git/$git_filename" "$HOME/$git_filename"
done

# ZSH
echo_task "Setting up ZSH"
if [[ "$SHELL" =~ .*zsh$ ]]; then
    echo_task "ZSH is the current shell"
else
    echo_task "Changing shell from ${SHELL} to zsh"
    sudo chsh -s $(which zsh) "$USER"
    echo -e "\n\n${ORANGE}WARNING:${NC}: Please logout and log back in for your shell change to take affect and re-run the setup script."
    exit 1
fi

if [ -d "$HOME/.oh-my-zsh" ]; then
   echo_sub_task "oh-my-zsh already installed"
else
   echo_sub_task "Installing oh-my-zsh"
   sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" || [ -d "$HOME/.oh-my-zsh" ]
   rm -rf "$HOME/.zshrc"
fi

ln -sf "$DOTFILES_DIR/zsh/.zshrc" "$HOME/.zshrc"
ln -sf "$DOTFILES_DIR/zsh/.zsh_aliases" "$HOME/.zsh_aliases"
ln -sf "$DOTFILES_DIR/zsh/.zsh_exports" "$HOME/.zsh_exports"

# End script, display any warnings
display_warns
echo -e "\n${YELLOW}Setup complete${NC}"