#!/bin/bash
set -e

USER=$(whoami)

# --------------------------------------------------

# COLORS

# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

NC='\033[0m' # No Color

DARK_GRAY='\033[1;30m'
GREEN='\033[0;32m'
LIGHT_PURPLE='\033[1;35m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
YELLOW='\033[1;33m'

# --------------------------------------------------

# FUNCTIONS

error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
        echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
        echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    exit "${code}"
}
trap 'error ${LINENO}' ERR

function echo_task() {
    echo -e " ${YELLOW}*${NC} $1"
}

function echo_sub_task() {
    echo -e "   ${YELLOW}*${NC} $1"
}

function check_apt_installed() {
    return dpkg -l "$1" &> /dev/null
}

function apt_install() {
    if dpkg --get-selections | grep -q "^$1[[:space:]]*install$" >/dev/null; then
        echo_sub_task "$1 already installed"
    else
        echo_sub_task "Installing $1"
        sudo apt-get install -qq -y "$1"
    fi
}

function is_sudo() {
    if groups | grep -q "\bsudo\b"; then
        return 0
    fi
    return 1
}

WARNS=()
function add_warn() {
    WARNS+=("$1")
}

function display_warns() {
    if [ ${#WARNS[@]} -gt 0 ]; then
        echo -e "\n\n${YELLOW}WARNING:${NC}"
        for warn in "${WARNS[@]}"
        do
            echo -e " ${YELLOW}*${NC} $WARNS"
        done
    fi
}

# --------------------------------------------------

DOTFILES_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# --------------------------------------------------

CPU_INFO=$(sed -n 's/^model name[ \t]*: *//p' /proc/cpuinfo | uniq | sed ':a;N;$!ba;s/\n/, /g')
DISTRO_NAME=$(sed -n 's/^NAME*= *//p' /etc/os-release | tr -d '"')
DISTRO_VERSION=$(sed -n 's/^VERSION_ID*= *//p' /etc/os-release | tr -d '"')
IS_RUNNING_SUDO=$(if is_sudo -eq 0; then echo 'Yes'; else echo 'No'${NC}; fi)

echo "----------------------------------------------------------------------------------------------------------------"
echo ""
echo -e "                 ..:::::::::.."
echo -e "            ..:::aad8888888baa:::.."
echo -e "         .::::d:?88888888888?::8b::::."
echo -e "       .:::d8888:?88888888??a888888b:::."
echo -e "     .:::d8888888a8888888aa8888888888b:::."
echo -e "    ::::dP::::::::88888888888::::::::Yb::::"
echo -e "   ::::dP:::::::::Y888888888P:::::::::Yb::::          ${YELLOW}User:${NC}           $USER"
echo -e "  ::::d8:::::::::::Y8888888P:::::::::::8b::::         ${YELLOW}Hostname:${NC}       $(hostname)"
echo -e " .::::88::::::::::::Y88888P::::::::::::88::::.        ${YELLOW}Distro:${NC}         $DISTRO_NAME $DISTRO_VERSION"
echo -e " :::::Y8baaaaaaaaaa88P:T:Y88aaaaaaaaaad8P:::::        ${YELLOW}Kernel:${NC}         $(uname -r)"
echo -e " :::::::Y88888888888P::|::Y88888888888P:::::::        ${YELLOW}Shell:${NC}          $SHELL"
echo -e " ::::::::::::::::888:::|:::888::::::::::::::::        ${YELLOW}CPU:${NC}            $CPU_INFO"
echo -e " ':::::::::::::::8888888888888b::::::::::::::'        ${YELLOW}Home directory:${NC} $HOME"
echo -e "  :::::::::::::::88888888888888::::::::::::::         ${YELLOW}Dotfiles:${NC}       $DOTFILES_DIR"
echo -e "   :::::::::::::d88888888888888:::::::::::::          ${YELLOW}Sudo:${NC}           $IS_RUNNING_SUDO"
echo -e "    ::::::::::::88::88::88:::88::::::::::::"
echo -e "     '::::::::::88::88::88:::88::::::::::'"
echo -e "       '::::::::88::88::P::::88::::::::'"
echo -e "         '::::::88::88:::::::88::::::'"
echo -e "            '':::::::::::::::::::''"
echo -e "                '':::::::::''"
echo ""
echo "----------------------------------------------------------------------------------------------------------------"
echo ""

echo "Executing tasks:"

# apt packages
if is_sudo -eq 0; then
    if command -v apt-get > /dev/null; then
        echo_task "Installing apt packages"
        apt_install "build-essential"
        apt_install "curl"
        apt_install "libbz2-dev"
        apt_install "libffi-dev"
        apt_install "liblzma-dev"
        apt_install "libncurses5-dev"
        apt_install "libreadline-dev"
        apt_install "libsqlite3-dev"
        apt_install "libssl-dev"
        apt_install "libxml2-dev"
        apt_install "libxmlsec1-dev"
        apt_install "llvm"
        apt_install "make"
        apt_install "ssh"
        apt_install "tk-dev"
        apt_install "wget"
        apt_install "xz-utils"
        apt_install "zlib1g-dev"
        apt_install "apt-transport-https"
        apt_install "ca-certificates"
        apt_install "software-properties-common"

        apt_install "python"
        apt_install "python-dev"
        apt_install "python3"
        apt_install "python3-dev"
        apt_install "python-pip"
        apt_install "python3-pip"
        apt_install "python-setuptools"
        apt_install "python3-setuptools"
        apt_install "tmux"
        apt_install "tree"
        apt_install "vim"
        apt_install "autojump"
        apt_install "htop"
        apt_install "libxss1"
        apt_install "libappindicator1"
        apt_install "libindicator7"
        apt_install "zsh"
    else
        echo_task "Skipping apt packages"
    fi
else
    echo_task "Skipping apt packages (not sudo)"
fi


# ZSH
echo_task "Setting up ZSH"

if [ -d "$HOME/.oh-my-zsh" ]; then
   echo_sub_task "oh-my-zsh already installed"
else
   echo_sub_task "Installing oh-my-zsh"
   git clone https://github.com/robbyrussell/oh-my-zsh $HOME/.oh-my-zsh
fi

echo_task "Symlinking ZSH config"

ln -sf "$DOTFILES_DIR/zsh/.zshrc" "$HOME/.zshrc"
echo_sub_task ".zshrc linked"

ln -sf "$DOTFILES_DIR/zsh/.zsh_aliases" "$HOME/.zsh_aliases"
echo_sub_task ".zsh_aliases linked"

ln -sf "$DOTFILES_DIR/zsh/.zshenv" "$HOME/.zshenv"
echo_sub_task ".zshenv linked"


# VIM
echo_task "Setting up VIM config"

echo_sub_task "Downloading gruvbox theme"
curl -o "$DOTFILES_DIR/vim/colors/gruvbox.vim" https://raw.githubusercontent.com/morhetz/gruvbox/master/colors/gruvbox.vim

echo_sub_task "Symlinking vim config"
ln -sf "$DOTFILES_DIR/vim" "$HOME/.vim"
ln -sf "$DOTFILES_DIR/vim/.vimrc" "$HOME/.vimrc"


# Google Chrome
echo_task "Setting up google chrome"

echo_sub_task "Downloading google-chrome"
wget --directory-prefix=/tmp/ https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
apt install /tmp/google-chrome*.deb


# Local ~/bin
echo_task "Setup local bin"
mkdir -p "$HOME/bin"
for f in $DOTFILES_DIR/bin/* $DOTFILES_DIR/bin/.[^.]*; do
    [ -e "$f" ] || continue

    bin_filename=$(basename "$f")
    echo_sub_task "$bin_filename"
    ln -sf "$DOTFILES_DIR/bin/$bin_filename" "$HOME/bin/$bin_filename"
done

for f in $DOTFILES_DIR/scripts/bin/* $DOTFILES_DIR/scripts/bin/.[^.]*; do
    [ -e "$f" ] || continue

    bin_filename=$(basename "$f")
    echo_sub_task "$bin_filename"
    ln -sf "$DOTFILES_DIR/scripts/bin/$bin_filename" "$HOME/bin/$bin_filename"
done


# SYS files
echo_task "Setup sys files"
for f in $DOTFILES_DIR/sys/* $DOTFILES_DIR/sys/.[^.]*; do
    [ -e "$f" ] || continue

    sys_filename=$(basename "$f")
    echo_sub_task "$sys_filename"
    ln -sf "$DOTFILES_DIR/sys/$sys_filename" "$HOME/$sys_filename"
done


# Git
echo_task "Setting up git"
for f in $DOTFILES_DIR/git/* $DOTFILES_DIR/git/.[^.]*; do
    [ -e "$f" ] || continue

    git_filename=$(basename "$f")
    echo_sub_task "$git_filename"
    ln -sf "$DOTFILES_DIR/git/$git_filename" "$HOME/$git_filename"
done


# tmux
echo_task "Setting up tmux"
for f in $DOTFILES_DIR/tmux/* $DOTFILES_DIR/tmux/.[^.]*; do
    [ -e "$f" ] || continue

    tmux_filename=$(basename "$f")
    echo_sub_task "$tmux_filename"
    ln -sf "$DOTFILES_DIR/tmux/$tmux_filename" "$HOME/$tmux_filename"
done



# Fonts
echo_task "Fonts"
if [ -d "$HOME/.fonts" ]; then
    echo_sub_task "Symlink already exists"
else
    echo_sub_task "Creating symlink"
    ln -sf "$DOTFILES_DIR/fonts" "$HOME/.fonts"
    if command -v fc-cache > /dev/null; then
        echo_sub_task "Updating fc-cache"
        fc-cache -f
    else
        echo_sub_task "Skipping fc-cache"
    fi
fi


# Install AWS CLI
if pip freeze | grep -q "awscli"; then
    echo_task "awscli already installed"
else
    echo_task "Install awscli"
    pip3 install --user awscli | sed 's/^/      /'
fi


# SSH Config
if [ -f "$HOME/.aws/credentials" ]; then
    echo_task "Applying SSH config"
    ssh_result=$(ssh-config --apply)
    echo_sub_task "${ssh_result}"
else
    add_warn "SSH config not applied because awscli is not installed and/or AWS credentials do not exist."
fi


# PYENV
echo_task "Setting up pyenv"

if [ -d "$HOME/.pyenv" ]; then
   echo_sub_task "pyenv already installed"
else
   echo_sub_task "Installing pyenv"
    echo_sub_task "Fetching pyenv repo"
    git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv
fi


# Docker
# echo_task "Setting up docker"

# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# apt update
# apt_install docker-ce

# End script, display any warnings
display_warns
echo -e "\n${YELLOW}Setup complete${NC}"